#!/usr/bin/env bash

# Quick and simple build script for the project.

# shellcheck source=scripts/common
. "$(dirname "${0}")/common" || { echo ERROR; exit 1; }

# Note: This target handles dependency tracking itself!

readonly PYTHON_PROTO_DIR="${PROTOC_DST_DIR}/python"

# $1: Message file to build
build_message_for_server() {
    protoc \
        --proto_path=messages \
        --python_out="${PYTHON_PROTO_DIR}" \
        --mypy_out="${PYTHON_PROTO_DIR}" \
        "${1}"

    return $?
}

# $*: Message files to build
build_messages_for_server() {
    local ec=0

    mkdir -p "${PYTHON_PROTO_DIR}"

    for msg in "${@}"; do
        message="Building \`${msg}\` (for the server)..." \
        run_command_in_server "build_message_for_server ${msg}" "${msg}" ".${msg}" || ec=$?
    done

    unset message
    return $ec
}

# $*: Message files to build
build_messages_for_client() {
    local ec=0

    for msg in "${@}"; do
        # shellcheck disable=2034
        message="Building \`${msg}\` (for the client)..." \
        full_msg_path="$(realpath "${msg}")"
        run_command_in_client_project "run build-messages -- '${full_msg_path}'" "${full_msg_path}" ".${msg}" || ec=$?
    done

    unset message
    return $ec
}

# In order to build, we need local dependencies and project dependencies.
# We also need dev-dependencies now because of the protoc mypy plugin.
resolve_deps local-deps install-dev install

# Build the proto files first (the client and the examples will need them):
shopt -s globstar
build_messages_for_server "${MESSAGES_DIR}"/**/*.proto
build_messages_for_client "${MESSAGES_DIR}"/**/*.proto

if [ -n "${BUILD_THOROUGH}" ]; then
    # Then the client (since rollup tracks it's own dependencies, always run):
    run_command_in_client_project "run build"

    # And finally, the examples (since parcel tracks it's own dependencies, always
    # run):
    run_command_in_examples "run build"
else
    # If we're not being thorough, use the project folder as the dependency:
    run_command_in_client_project "run build" "src" "${BUILD_MARKER_NAME}"
    run_command_in_examples "run build" "." "${BUILD_MARKER_NAME}"
fi

print "\nBuild Successful!" "$PURPLE"
