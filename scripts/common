#!/usr/bin/env bash

set -e

readonly NAME="web-demos"
readonly VERSION="0.0.0"
readonly AUTHOR="???" # TODO

readonly BUILD_DIR="build"
readonly SCRIPT_DIR="$(dirname "${0}")"
readonly EXAMPLES_DIR="examples"
readonly MESSAGES_DIR="messages"
readonly CLIENT_DIR="client"
readonly SERVER_DIR="server"
readonly PROTOC_DST_DIR="build"
readonly MODEL_DIR="models"
readonly PACKAGE_DIR="dist"

readonly ISORT_FLAGS=" -j$(nproc) -sg *node_modules*"

readonly NC='\e[0m'
readonly RED='\e[1;31m'
readonly GREEN='\e[1;32m'
readonly YELLOW='\e[1;33m'
readonly BLUE='\e[1;34m'
readonly PURPLE='\e[1;35m'
readonly CYAN='\e[1;36m'
readonly BOLD='\e[1;37m'

# $1: message; $2?: color
print() {
    echo -en "${2-${NC}}"
    echo -en "${1}"
    echo -en "${NC}\n"
}

# $1: message; $2?: color
dprint() {
    [ -z ${DEBUG_BUILD+x} ] || print "${@}"
}

# $1: error message; $2: exit code
err() {
    print "${1}" $RED && exit "${2}"
}

# $1: binary name, $2: suggestion
check_local_dep() {
    hash "${1}" 2>/dev/null ||
        { print 'Missing `'"${1}"'`; please install it and try again.' $RED &&
          print "(try ${2})" $BLUE &&
          exit 1
        }
}

# $@: dependency names
resolve_deps() {
    for dep_name in "${@}"; do
        dprint "> ${dep_name}:"

        # If a dependency's marker file doesn't exist..
        [ -f "$(marker_file "${dep_name}")" ] || {
            # ..run its script:
            echo
            print "Resolving ${dep_name}:" $BLUE
            ("$(script_file "${dep_name}")") || {
                err "Failed to resolve ${dep_name}!" $?
            }
        }

        dprint ""
    done
}

# $1: marker file; $2+: command to run
find_or_run() {
    # If the file doesn't exist..
    [ -f "${1}" ] || {
        # ..run the command..
        "${@:2}" && {
            # ..and if it succeeded, make the file.
            mkdir -p "$(dirname ${1})"
            touch "${1}"
        } || return 1
    }

    return 0
}

# $1: dependency; $2: marker file
# Returns 0 if $1 is older than $2
#         1 if $1 is newer than $2 (or the same file)
#         2 if $2 doesn't exist
#         5 if $1 doesn't exist
#         6 if FORCE_REBUILD is set
check_if_newer() {
    dprint "Comparing ${1} to ${2} (in $(pwd))"

    [ -z "${FORCE_REBUILD+x}" ] || return 6
    [ -e "${1}" ] || {
        dprint "\`${1}\` doesn't exist, building unconditionally.."; return 5; }
    [ -e "${2}" ] || return 2

    [ "${1}" -ot "${2}" ]
}

# $1: dependency; $2: marker file; $3+: command to run
conditionally_run() {
    # If the marker says we've run the command since the dependency was last
    # updated, do nothing.
    { check_if_newer "${1}" "${2}" &&
        dprint "\`${1}\` hasn't changed." $BROWN
    } || {
        # Otherwise, run the command..
        cmd="${@:3}"
        print "\n${message:-"Running \`${cmd}\` in '$(basename $(pwd))'..."}" $BOLD
        "${@:3}" && {
            # ..and if it succeeded, update the marker file:
            mkdir -p "$(dirname "${2}")"
            touch "${2}"
        } || return $?
    }

    return 0
}

# $1: example dir; $2: npm command; $3?: dependency; $4?: marker file
run_command_in_example() {
    # Check that the example project has a build script:
    { [ -f "${1}/package.json" ] &&
        jq -e '.scripts.build' < "${1}/package.json" > /dev/null
    } || return 0;

    # If it does and if we were given a marker file, run conditionally:
    if [ ! -z "${4}" ]; then
        (cd "${1}" && conditionally_run "${3}" "${BUILD_DIR}/${4}" npm ${2})
    else
        # Otherwise, run unconditionally:
        (cd "${1}" && conditionally_run "..." "." npm ${2})
    fi
    # (cd "${1}" && conditionally_run "${3-_}" "${BUILD_DIR}/${4}")
    # print "Running \`npm ${2}\` in ${1}..." $BOLD
    # (cd "${1}" && npm ${2})
    # return $?
}

# $1: npm command to run; $2?: dependency; $3?: marker file
run_command_in_examples() {
    for ex in "${EXAMPLES_DIR}"/*; do
        run_command_in_example "${ex}" "${@}"
    done
}

# $1: npm command to run; $2?: dependency; $3?: marker file
run_command_in_examples_async() {
    for ex in "${EXAMPLES_DIR}"/*; do
        run_command_in_example "${ex}" "${@}" &
    done
}

# $1: npm command to run; $2?: dependency; $3?: marker file
run_command_in_client_project() {
    run_command_in_example "${CLIENT_DIR}" "${@}"
}

# $1: command to run; $2?: dependency; $3?: marker file
run_command_in_server() {
    conditionally_run "${2-"..."}" "${BUILD_DIR}/${3-"."}" ${1}
}

# $*: server commands; '--'; $*: client commands; '--'; $*: operation name
# runs unconditionally
server_client_pair() {
    local ec=0
    local server client name

    while [[ "${1}" != -- ]]; do
        server+=("${1}")
        shift 1 || return $?
    done

    shift 1 || return $?

    while [[ "${1}" != -- ]]; do
        client+=("${1}")
        shift 1 || return $?
    done

    shift 1 || return $?

    name=("${@}")

    print "Server: ${name[@]-running an operation}..." $BOLD
    for cmd in "${server[@]}"; do
        ${cmd} || ec=$?
    done

    print "Client: ${name[@]-running an operation}..." $BOLD
    for cmd in "${client[@]}"; do
        run_command_in_client_project "${cmd}" || ec=$?
    done

    return ${ec}
}

# Details, for the curious:
#
# This system doesn't understand dependencies that aren't static. For example it
# doesn't understand that if the Pipfile changes we should rerun install when we
# run `pipenv run run`. However, it does know that `pipenv run run` requires
# the dependencies to have been installed and for the build script to have been
# run (run = `scripts/with build install -- python -m server` -- see the
# Pipfile). So, it'll make sure that up to this point, the build/install scripts
# have been run _at least once_.
#
# This is checked and enforced using the marker files convention for these is
# defined below. Targets that don't have dependencies (i.e. build) are run as is
# (scripts/build) and are careful to update their corresponding marker file.
# Targets that do have dependencies are run with the `with` script: the list of
# targets that the target depends on are passed in first, followed by --,
# followed by the target's command. Format and test, for example:
# ```TOML
# format = scripts/with install-dev -- black
# test = scripts/with install-dev install build -- pytest
# ```
# At the moment we have three targets that don't have dependencies: build,
# install, and install-dev. These always run (ignoring their marker files) when
# their corresponding scripts are directly invoked.
#
# We're going to let the individual scripts handle non-static dependencies. If
# a script has a dependency that isn't static (or isn't a closed loop), it
# should not create a marker file so that our system always invokes it and then
# it should perform whatever actions it deems necessary.
#
# For example, install: this should be re-run whenever the Pipfile is updated.

# There are three things:
#  - the target name that gets passed to the `with` script
#  - the corresponding script
#  - that scripts corresponding marker file
#
# The convention we're going to use is that all three of these things are the
# same.
#
# For example, the build script lives in `scripts/build`, has 'build' as it's
# target name and creates the marker file `build/.build`.
#
# Similarly for install: `scripts/install`, 'install', `build/.install`.

# $1: string -> string
strip_leading_dot() {
    echo "${1#.}"
}

# $1: script path or target name -> file path
marker_file() {
    echo "${BUILD_DIR}/.$(basename "${1}")"
}

# $1: marker file or script path -> string
target_name() {
    echo "$(strip_leading_dot "$(basename "${1}")")"
}

# $1: target name or marker file -> file path
script_file() {
    echo "${SCRIPT_DIR}/$(strip_leading_dot "$(basename "${1}")")"
}

mark() {
    find_or_run "$(marker_file "${0}")" :
}

# $1: target name -> target name
roundtrip() {
    echo $(target_name $(marker_file $(script_file $(target_name $(marker_file "${@}")))))
}

# $1: target name
test() {
    [[ "${@}" == $(roundtrip "${@}") ]]; return $?
}

readonly marker=".__$(basename "${0}")"
