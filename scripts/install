#!/usr/bin/env bash

# Grabs dependencies; preps for a build.

# shellcheck source=scripts/common
. "$(dirname "${0}")/common" || { echo ERROR; exit 1; }

# Note: This target handles dependency tracking itself and doesn't drop marker
# files!

# In order to install, we need our local dependencies to be installed:
resolve_deps local-deps

# Then install deps for all the client:
# Somehow, package.json keeps getting accessed after npm install completes, so
# we'll do change detection manually here instead of relying on timestamps.
readonly \
client_install_marker=\
"${marker}_client_$(md5sum "${CLIENT_DIR}/package.json" | cut -d ' ' -f 1)"

if [ ! -f "${client_install_marker}" ]; then
    # If we've got real changes (and only then!), reinstall deps for the client:
    dprint "The client's package.json appears to have changed; reinstalling..."
    cp "${CLIENT_DIR}/package.json" "${CLIENT_DIR}/package.json.bak"
    run_command_in_client_project install package.json
    mv "${CLIENT_DIR}/package.json.bak" "${CLIENT_DIR}/package.json"

    touch "${client_install_marker}"
fi

# And all the examples:
run_command_in_examples install package.json "${marker}"

pipenv_install() { pipenv install && print "Install Successful!" "$PURPLE"; }

# Next, pipenv:
PIP_IGNORE_INSTALLED=1 run_command_in_server pipenv_install Pipfile "${marker}" ||
    err "Failed to install python dependencies." $?
