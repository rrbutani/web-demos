#!/usr/bin/env bash

# Creates a setup.py script and then a wheel with all the prepared assets
# (examples, templates, local models, etc.) baked in.

# shellcheck source=scripts/common
. "$(dirname "${0}")/common" || { echo ERROR; exit 1; }

# Set debug if we're being told this is a debug release.
set_opt "${1}" debug DEBUG

# If we're doing a clean build:
set_opt "${2}" anew FORCE_REBUILD

is_set FORCE_REBUILD && {
    SCRUB="" resolve_deps clean
}

# In order to package the project, we need to make sure we've got our local
# dependencies, the dev dependencies (setuptools), that the project has been
# built, and that the models have been fetched.
resolve_deps local-deps install-dev build fetch

# Before we're ready to package things up, we should make sure that the project
# passes the checks we have (formatting and linting) and passes the tests.
#
# This isn't always desirable, since sometimes the project has already been
# tested (i.e. in the CI setup, testing is a separate step that's a
# _prerequisite_ to this step running), so the checks can be skipped with the
# 3rd argument as below.

# If we're skipping checks:
set_opt "${3}" skip-checks SKIP_CHECKS

is_set SKIP_CHECKS || {
    # Otherwise:
    resolve_deps check-fmt lint test
}

# Check if we're checking the wheel we generate:
set_opt "${4}" check-wheel CHECK_WHEEL

# Check if we're going to ultimately upload the wheel:
set_opt "${5}" upload-wheel UPLOAD_WHEEL


# If we're still here, we're good to go!
print_opt() { print "  * $(printf "%-13s" "${1}:") ${!2+${GREEN}Enabled:: }${BLUE}${!2-${RED}Disabled ${!2+(}${!2}${!2+)}}" "$YELLOW"; }
print "We're ready to build!\n" "$BOLD"
print "Here are the options we got:" "$YELLOW"
print_opt "Debugging" DEBUG
print_opt "Clean build" FORCE_REBUILD
print_opt "Skip checks" SKIP_CHECKS
print_opt "Check wheel" CHECK_WHEEL
print_opt "Upload wheel" UPLOAD_WHEEL
print ""

# First, let's copy over the files:

# Make a fresh package directory.
rm -rf "${PACKAGE_DIR}"

readonly TARGET_DIR="${PACKAGE_DIR}/${PROJ_NAME}"
mkdir -p "${TARGET_DIR}"

MANIFEST_FILE="${PACKAGE_DIR}/MANIFEST.in"
touch "${MANIFEST_FILE}"

# Copy the things!
_c() { t="${3-"${TARGET_DIR}"}/$1"; d="$(dirname "${t}")"; mkdir -p "$d"; cp -R "$1" "$d"; echo "${2:-include} $(realpath --relative-to="${PACKAGE_DIR}" "${t}")" >> "${MANIFEST_FILE}"; }
copy() { dprint "Copying \`${1}\`."; _c "${@}"; }

# Handle environments where .git isn't present:
if [ ! -d ".git" ]; then
    readonly NO_LOCAL_GIT_DIR=true
    print "No local .git folder, so:"
    git init
fi

git clean -dfX "${SERVER_DIR}"

if [ -n "${NO_LOCAL_GIT_DIR}" ]; then
    rm -rf .git
fi

copy "${SERVER_DIR}"            '###' # Server source code
copy "${SERVER_DIR}/templates"  graft # Templates
copy "${PROTOC_DST_DIR}/python" graft # Generated protobuf files for python
copy "${MODEL_DIR}"             graft # Local models
copy "${SCRIPT_DIR}/common"           # Needed by __init__.py in `types/`
copy "LICENSE"                include "${PACKAGE_DIR}"
copy "README.md"              include "${PACKAGE_DIR}"

touch "${TARGET_DIR}/py.typed" # We're typed!
touch "${TARGET_DIR}/__init__.py" # We're a module now
echo "from . import ${SERVER_DIR}" >> "${TARGET_DIR}/__init__.py"

# Copy over the source maps if we're in debug mode:
[ -n "${DEBUG}" ] && {
    # shellcheck disable=SC2140
    for f in {"${CLIENT_DIR}/dist","${EXAMPLES_DIR}/"*"/dist"}/*.map; do
        copy "${f}"
    done
}

# Dist files from the examples:
for f in "${EXAMPLES_DIR}/"*"/dist/"*.{css,js,html}; do
    copy "${f}"
done

# Figure out our dependencies:
readonly REQ_FILE="requirements.txt"
pipenv lock -r > "${PACKAGE_DIR}/${REQ_FILE}"

# Next, make setup.py:

DESC="$(head -4  < "${README}" | tail -1)"

if [ -d ".git" ]; then
    URL="$(git config --get remote.origin.url)"
    URL="${URL##git@}"

    AUTHOR="$(git --no-pager show -s --format='%an' HEAD~1)"
    EMAIL="$(git --no-pager show -s --format='%ae' HEAD~1)"
elif [ -n "${GITHUB_ACTION}" ]; then
    URL="$(jq .repository.html_url < "${GITHUB_EVENT_PATH}")"

    AUTHOR="$(jq .repository.owner.name < "${GITHUB_EVENT_PATH}")"
    EMAIL="$(jq .repository.owner.email < "${GITHUB_EVENT_PATH}")"
fi

PYTHON_VER=">=$(grep "python_version" < Pipfile \
    | cut -d'=' -f2 \
    | tr -d '"' \
    | tr -d ' ')"

opt_set() { is_set "$1" && echo True || echo False; }

# $1: entity
entity() {
    if [ -d "$1" ]; then
        # If it's a folder loop through it's items:
        dprint "${1} is a dir"
        for i in "${1}/"*; do
            entity "${i}"
        done
    else
        dprint "${1} is a file"
        # Otherwise, treat it like a file:
        echo -e "${PREFIX}        ('$(dirname "${1}")', ['${1}']),"
    fi
}

# $1: Manifest File
data_files() {
    while read -r l; do
        [[ $l =~ ^graft. || $l =~ ^include. ]] && {
             entity "$(cut -d ' ' -f 2- <<<"${l}")"
        }
    done < "${1-${MANIFEST_FILE}}"
}

MANIFEST_FILE="$(realpath "${MANIFEST_FILE}")"
cd "${PACKAGE_DIR}" || \
    err "Failed to move to the package directory (${PACKAGE_DIR})!" $?

cat <<-EOF > "setup.py"
	#/usr/bin/env python

	# Autogenerated!! (on $(date +"%B %d, %Y %I:%M %p" ))
	# Probably don't edit manually.

	# Loosely based on [this](https://git.io/fjDWm).

	import io
	import os

	from setuptools import setup, find_packages

	from pbr.packaging import parse_dependency_links as pd
	from pbr.packaging import parse_requirements as pr

	root = os.path.abspath(os.path.dirname(__file__))
	req_files = ["${REQ_FILE}"]

	try:
	    with io.open(os.path.join(root, 'README.md'), encoding='utf-8') as f:
	        long_description = '\n' + f.read()
	except FileNotFoundError:
	    long_description = "${DESC}"

	reqs = pr(requirements_files=req_files)
	dep_links = pd(requirements_files=req_files)

	dep_pairs = [ tuple(dep.split('#egg=')) for dep in dep_links ]

	for url, name in dep_pairs:
	    if name in reqs:
	        print(f"Removing {name}")
	        reqs.remove(name)

	    print(f"Adding {name} @ {url}")
	    reqs.append(f"{name} @ {url}")

	setup(
	    name="${PROJ_NAME}",
	    version="${VERSION}",
	    description="${DESC}",
	    long_description=long_description,
	    long_description_content_type='text/markdown',
	    author="${AUTHOR}",
	    author_email="${EMAIL}",
	    python_requires="${PYTHON_VER}",
	    url="${URL}",

	    install_requires=reqs,
	    dependency_links=dep_links,

	    setup_requires=["setuptools-metadata", "pbr"],
	    custom_metadata={
	        'x_debug_enabled': $(opt_set DEBUG),
	        'x_clean_build': $(opt_set FORCE_REBUILD),
	        'x_checked': not $(opt_set SKIP_CHECKS),
	        'x_wheel_checked': $(opt_set CHECK_WHEEL),
	        'x_host': "$(uname -a)",
	    },

	    zip_safe=False,
	    include_package_data=True,

	    # packages=[
	    #    "${PROJ_NAME}",
	    #    "${PROJ_NAME}/${SERVER_DIR}",
	    # ],

	    packages=find_packages(),

	    package_data={
	        "${PROJ_NAME}": ["py.typed"]
	    },

	    entry_points={
	        "console_scripts": ["${EXC_NAME} = ${PROJ_NAME}.server:main"]
	    },

	    # data_files=[
	    #     $(PREFIX=# data_files "${MANIFEST_FILE}")
	    # ],
	)
EOF

python setup.py bdist_wheel sdist
print "Successfully built a wheel!" "${CYAN}"

if is_set CHECK_WHEEL; then
    print "\nVerifying that the wheel works..." "${BOLD}"

    mkdir -p dist/testing
    cd dist/testing || \
        err "If you're seeing this, something is very very broken.." 5

    virtualenv venv -p "python${PYTHON_VER##*=}"
    venv/bin/pip install ../*.whl || \
        err "Failed to install the generated wheel!" 6

    # Kill the server if it's already running in this session:
    pgrep "${EXC_NAME}" | cut -d ' ' -f1 | xargs kill >/dev/null 2>&1 || true

    export HOST=localhost
    export PORT=${PORT-7000}

    "venv/bin/${EXC_NAME}" &

    count=0
    wait_time=3
    while ! curl -sf "${HOST}:${PORT}" > /dev/null; do
        [ ${count} -eq 20 ] && \
            err "Server failed to start after $((count * wait_time)) seconds." 7
        ((count+=1)) # += instead of ++ so we don't leak an exit code
        echo -n "."
        sleep "${wait_time}"
    done

    kill %1 || true
    wait
    cd ../../
    print "\nThe wheel appears to work!" "$CYAN"
fi

if is_set UPLOAD_WHEEL; then
    virtualenv venv-upload -p "python${PYTHON_VER##*=}"
    venv/bin/pip install twine

    twine \
        -r "${WHEEL_UPLOAD_REPO}" \
        -u "${WHEEL_UPLOAD_USERNAME}" \
        -p "${WHEEL_UPLOAD_PASSWORD}" \
        dist/*.whl

    print "Upload successful!" "${CYAN}"
fi
